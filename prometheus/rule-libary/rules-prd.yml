groups:
- name: node
  rules:
  - alert: Server_Load
    expr: max(node_load5) by (instance) - 1.5 * (count by (instance) (node_cpu_seconds_total) / 8) > 0
    for: 15s
    annotations:
      summary: " {{ $labels.instance }} Load is too high!"
  - alert: CPU_Usage
    expr: sum by (instance)(rate(node_cpu_seconds_total{ mode != "idle", mode != "iowait"}[1m])) / (count by (instance) (node_cpu_seconds_total) / 8) > 0.7
    for: 15s
    annotations:
      summary: " {{ $labels.instance }} CPU Usage is too high!"
  - alert: IO_wait
    expr: sum by (instance)(rate(node_cpu_seconds_total{instance="$instance", mode != "idle", mode != "iowait"}[1m])) / (count by (instance) (node_cpu_seconds_total) / 8) > 80
    for: 15s
    annotations:
      summary: " {{ $labels.instance }} IO Read/Write is too busy!"
  - alert: Server_Status
    expr: node_uname_info == 0
    for: 15s
    annotations:
      summary: " {{ $labels.instance }} is DOWN!"
  - alert: DiskSpace
    expr: (100 - (node_filesystem_free_bytes{fstype!='rootfs',mountpoint!~'/(run|var).*',mountpoint!=''} / node_filesystem_size_bytes) * 100)*1.06 > 85
    for: 15s
    annotations:
      summary: " {{ $labels.instance }} Less than 10% space Free!"
  - alert: DeviceTemparature
    expr: avg(node_hwmon_temp_celsius) by (instance) > 55
    for: 15s
    annotations:
      summary: " {{ $labels.instance }} DeviceTemparature is Too High"
  - alert: RedisCommandsTooMany
    expr: rate(redis_commands_processed_total{addr=~"$addr"}[5m]) > 5000
    for: 15s
    annotations:
      summary: " {{ $labels.instance }} has Too Many command to execuate!"
  - alert: RedisMemoryUsage
    expr: redis_config_maxmemory - redis_memory_used_bytes  < 10000000 
    for: 15s
    annotations:
      summary: " {{ $labels.instance }} has archieve the max of Memory set!"
  - alert: service_cannot_connect
    expr: up{job="service-kubernetes-namespaces"} ==0 and  probe_http_status_code{job="service-kubernetes-namespaces"}!=404 and probe_http_status_code{job="service-kubernetes-namespaces"}!=0 and probe_http_status_code{job="service-kubernetes-namespaces"}!=200
    for: 10s
    labels:
      severity: "critical"
    annotations:
      summary: "Endpoint {{ $labels.instance }} down"
  - alert: suncash 项目有服务挂了
    expr: count(probe_success{stage="sit",instance=~'.*8080',job="service-kubernetes-namespaces"}==0) - count(probe_success{consul_tags=~".*sit.*",nstance=~'.*8080',job="consul-prometheus-http"}==0) -1 > 0
    for: 10s
    labels:
      severity: "critical"
    annotations:
      summary: "有 {{ $value }} 个服务挂啦，连不到consul，快到这里来http://47.74.219.229:9090/alerts"
  - alert: suncash 生产有服务挂了！！！
    expr: count(probe_success{stage="prd",instance=~'.*8080',job="service-kubernetes-namespaces"}==0) - count(probe_success{consul_tags=~".*prd.*",instance=~'.*8080',job="consul-prometheus-http"}==0) -1 > 0
    for: 10s
    labels:
      severity: "critical"
    annotations:
      summary: "有 {{ $value }} 个服务挂啦，连不到consul，快到这里来http://47.74.219.229:9090/alerts"

# 创建快捷永久记录
- name: record_shortcut
  interval: 10s
  rules:
  - record: instance::predict_networktraffic
    expr: predict_linear(node_network_transmit_bytes_total{device="eth0",instance="172.10.10.28"}[7d],7*86400) / 1024/1024/1024
    labels:
      provider: "aws"
      metric_type: aggregation

