events {
    # 每个 worker 最大连接数
    worker_connections 4096;
    worker_aio_requests 32;
		# nginx在已经得到一个新连接的通知时,接收尽可能多的连接
		multi_accept        on;
		#防止惊群现象发生,默认为on
		accept_mutex on; 
		worker_connections  16384;
    use epoll;
}


http {
    keepalive_disable msie6;
    keepalive_requests 100;
    keepalive_timeout 60s;
		
		aio                 threads;
		aio_write           on;
		
		tcp_nopush          on;
		tcp_nodelay         on;
		
		log_subrequest      on;
		
		reset_timedout_connection on;
		# thread_pool default threads=32 max_queue=65536;

		# 启动worker个数
		worker_processes 4;
		# 绑定内核，id=1,2,4,8
		worker_cpu_affinity 0001 0010 0100 1000;

		# 设置worker假死后，超时关闭
		worker_shutdown_timeout 30s;
		# worker临时文件存放目录
		working_directory /tmp/nginx/worker_core_file/;
    # 提前预分配大小，当对象内容(上下文)大于connection_pool_size还是可以分配的，这里只是减少分配内存的次数
    connection_pool_size 256|512;
    # 需要保存大量上下文信息（读取到的头部、URL等），所以比较大
    request_pool_size 4k;
			server {
				# 接受URL时, 分配请求内存池
				request_pool_size 4k;
				# 默认头部大小
				client_header_buffer_size 1k;
				# 当URL太长时和解析头部的时候公用此缓存, 分配最多4块*8K，
				# 根据最小匹配方式，先8K，再16K，不够再24K，最大32K
				large_client_header_buffers 4 8k;
				# 移除头部定时器（60s）
				client_header_timeout 60s;
		}
}